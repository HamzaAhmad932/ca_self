<?php
/**
 * Created by PhpStorm.
 * User: mmammar
 * Date: 12/10/18
 * Time: 9:45 AM
 */

namespace App\System\PMS\BookingAutomation;


use App\System\PMS\exceptions\PmsExceptions;

class NotificationUrlBookingAutomation {

    private $url = 'http://138.197.165.176/api/booking_automation?';
    private $params = array();

    const PROPERTY_ID = 'propertyId';
    const CHANNEL_CODE = 'channelCode';
    const BOOKING_ID = 'bookid';
    const STATUS = 'status';
    const TOKEN = 'token';
    const CVV = 'cvv';
    const GROUP_ID = 'groupId';

    const META_USER_ACCOUNT_ID = 'user_account_id';

    public function __construct() {
        $this->params = array();
        $this->url = config('db_const.ba_pms_form.notify-url', 'https://app.chargeautomation.com/api/booking_automation?');

//        if (config('app.debug') == true)
//            $this->url = 'http://138.197.165.176/api/booking_automation?';
//        else
//            $this->url = 'https://app.chargeautomation.com/api/booking_automation?';
    }

    public function generateURL() {

        $parameters = array();
        $paramString = '';

        foreach ($this->params as $key => $value)
            $parameters[] = $key ."=" . $value;

        if(count($parameters) > 0)
            $paramString = implode("&amp;", $parameters);

        if(strlen($paramString) > 0)
            return $this->url . $paramString;


        return null;
    }

    /**
     * Adds meta information in URL
     * @param bool $enable
     * @param int $user_account_id
     * @return NotificationUrlBookingAutomation
     */
    public function enableMetaUserAccountId(bool $enable, int $user_account_id) {

        if($enable)
            $this->params[self::META_USER_ACCOUNT_ID] = $user_account_id;
        elseif (key_exists(self::META_USER_ACCOUNT_ID, $this->params))
            unset($this->params[self::META_USER_ACCOUNT_ID]);

        return $this;
    }

    /**
     * Adds "propertyId" parameter to URL generated by CA system
     * @param bool $enable
     * @return NotificationUrlBookingAutomation
     */
    public function enablePropertyId(bool $enable) {

        if($enable)
            $this->params[self::PROPERTY_ID] = '[PROPERTYID]';
        elseif(key_exists(self::PROPERTY_ID, $this->params))
            unset($this->params[self::PROPERTY_ID]);

        return $this;
    }

//    public function enableToken(bool $enable) {
//
//        if($enable)
//            $this->params['token'] = '[TOKEN]';
//        elseif(key_exists('token', $this->params))
//            unset($this->params['token']);
//
//        return $this;
//    }

    /**
     * Adds "channelCode" parameter to URL generated by CA system
     * @param bool $enable
     * @param null $channelCodeOnlyForTesting In production or normal use case null can be passed or nothing.
     * @return NotificationUrlBookingAutomation
     */
    public function enableChannelCode(bool $enable, $channelCodeOnlyForTesting = null) {

        if($enable)
            if($channelCodeOnlyForTesting != null)
                $this->params[self::CHANNEL_CODE] = $channelCodeOnlyForTesting;
            else
                $this->params[self::CHANNEL_CODE] = '[APISOURCE]';

        elseif(key_exists(self::CHANNEL_CODE, $this->params))
            unset($this->params[self::CHANNEL_CODE]);

        return $this;
    }

    public function enableGroupId(bool $enable) {

        if($enable)
            $this->params[self::GROUP_ID] = '[GROUPID]';
        elseif(key_exists(self::GROUP_ID, $this->params))
            unset($this->params[self::GROUP_ID]);

        return $this;
    }

}